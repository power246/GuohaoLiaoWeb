简介
本项目是基于 Python 的 Othello（黑白棋）游戏实现。它支持不同类型的玩家（人类、随机 AI、简单 AI），并允许在任意大小的矩形棋盘上进行游戏。该项目是 CSCI 1913 课程的第一个编程作业，遵循了课程提供的规范和要求。

功能特点
游戏规则：基于 Othello（黑白棋）的标准规则，玩家轮流放置棋子，并翻转符合规则的对方棋子。

棋盘初始化：可创建任意大小的矩形棋盘，并自动放置初始的四个棋子。

合法落子判断：检查玩家输入是否为合法落子点，确保游戏规则的正确性。

游戏模式：支持多种对战模式，包括：

人类 vs 随机 AI

AI vs 随机 AI

随机 AI vs 随机 AI

AI 逻辑：提供两种 AI 选择：

随机 AI：在所有合法落子点中随机选择一个进行落子。

简单 AI：选择可以翻转最多棋子的落子点。

棋盘可视化：通过 ASCII 字符在终端中显示棋盘状态，支持不同颜色的棋子符号（⚫ 和 ⚪）。

技术栈
编程语言：Python

核心库：random（用于随机 AI 落子）

算法：搜索合法落子点、计算棋子翻转、选择最佳落子点

挑战与解决方案
合法落子判断：实现 is_valid_move 函数，确保落子点符合 Othello 规则。

棋子翻转逻辑：设计 flip 函数，确保所有符合条件的棋子都能被正确翻转。

棋盘边界处理：确保边界处的落子不会超出数组索引范围，避免程序崩溃。

终端输出可读性：使用 get_board_as_string 函数优化棋盘显示，使游戏更具可视化效果。

未来改进方向
提升 AI 智能：改进 AI 逻辑，使其可以考虑多个回合的策略，而不仅仅是翻转最多棋子。

增加 GUI 版本：使用 pygame 或 tkinter 开发图形界面，使游戏更加直观。

支持网络对战：增加基于 Socket 的网络通信，让两名玩家可以远程对战。

游戏历史记录：保存每局游戏的对局记录，供玩家回顾和分析策略。

本项目展示了我在 Python 语言、算法设计以及游戏逻辑实现方面的能力，并仍在持续优化中！