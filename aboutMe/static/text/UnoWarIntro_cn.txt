项目：卡牌游戏AI对战模拟器
简介
一个基于Java开发的卡牌游戏模拟系统，实现了三种不同策略的AI玩家（随机出牌、最大牌优先、最小牌优先）在类UNO规则下的自动化对战，并通过统计学方法分析不同AI的胜率表现。

功能特点
多策略AI系统：
基础AI（AI.java）：随机选择第一张有效牌
激进策略（BiggestCardAI.java）：优先打出点数最大的有效牌
保守策略（SmallestCardAI.java）：优先打出点数最小的有效牌
通过继承机制实现策略复用（父类AI与子类关系）
完整的游戏逻辑：
卡牌系统（Card.java）：支持52张标准扑克牌的创建与校验
牌堆管理（CardPile.java）：实现出牌规则验证（点数≥上家或同花色）
牌库控制（Deck.java）：采用Fisher-Yates-Knuth算法洗牌
手牌管理（Hand.java）：支持动态抽牌和弃牌操作
数据驱动测试：
对战模拟器（UnoWarMatch.java）：自动执行多轮对战
胜率统计（Tournament.java）：计算不同AI组合的1000次对战胜率

技术栈
核心语言：Java 8+
关键算法：
洗牌算法（Fisher-Yates-Knuth）
策略模式（通过类继承实现）
开发工具：IntelliJ IDEA/Eclipse（根据实际使用情况填写）

挑战与解决方案
挑战1：不同AI策略的代码复用
解决方案：使用父类AI定义基础接口，子类通过重写getPlay()方法实现策略差异
挑战2：卡牌有效性验证的边界条件
解决方案：在Card类构造函数中加入参数校验，并通过flag标记无效卡牌
挑战3：大规模对战模拟的性能优化
解决方案：在UnoWarMatch.winRate()中采用批量测试而非单例模式

未来改进方向
增加GUI可视化对战过程
扩展卡牌规则支持（如UNO特殊功能牌）
添加玩家胜率预测模型

该项目展示了我在面向对象设计、算法实现和数据分析方面的能力，后续可通过接入机器学习框架进一步提升AI智能性。